{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_FIELD_ALPH","SORT_FIELD_LENGTH","App","useState","sortField","setSortField","reverseField","setReverseField","sortedGoods","goods","reverse","preparedGoods","sort","good1","good2","localeCompare","length","getPreparedGoods","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"wUAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAkB,OAClBC,EAAoB,SAyBnB,IAAMC,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwCF,oBAAS,GAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACMC,EA1BR,SAA0BC,EAAOL,EAAWM,GAC1C,IAAIC,EAAa,YAAOF,GAExB,GAAIL,EACF,OAAQA,GACN,KAAKJ,EACHW,EAAcC,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAME,cAAcD,MACzD,MACF,KAAKb,EACHU,EAAcC,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMG,OAASF,EAAME,UAC1D,MACF,QACEL,EAAa,YAAOA,GAQ1B,OAJID,GACFC,EAAcD,UAGTC,EAMaM,CAClBlB,EACAK,EACAE,GAWF,OACE,sBAAKY,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CAAE,WAAYhB,IAAcJ,IAE9BqB,QAAS,kBAAMhB,EAAaL,IAP9B,iCAYA,wBACEmB,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CAAE,WAAYhB,IAAcH,IAE9BoB,QAAS,kBAAMhB,EAAaJ,IAP9B,4BAYA,wBACEkB,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CAAE,YAAad,IAEjBe,QAAS,kBAAMd,GAAiBD,IAPlC,wBAlCAA,IAAgBF,IA+Cd,wBACEe,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPhB,EAAa,IACbE,GAAgB,IALpB,sBAaJ,6BACGC,EAAYc,KAAI,SAAAC,GAAI,OACnB,oBAAe,UAAQ,OAAvB,SACGA,GADMA,YChHnBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAC1C,MAAkCxB,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,O","file":"static/js/main.5b95f857.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_FIELD_ALPH = 'alph';\nconst SORT_FIELD_LENGTH = 'length';\n\nfunction getPreparedGoods(goods, sortField, reverse) {\n  let preparedGoods = [...goods];\n\n  if (sortField) {\n    switch (sortField) {\n      case SORT_FIELD_ALPH:\n        preparedGoods.sort((good1, good2) => good1.localeCompare(good2));\n        break;\n      case SORT_FIELD_LENGTH:\n        preparedGoods.sort((good1, good2) => good1.length - good2.length);\n        break;\n      default:\n        preparedGoods = [...preparedGoods];\n    }\n  }\n\n  if (reverse) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [reverseField, setReverseField] = useState(false);\n  const sortedGoods = getPreparedGoods(\n    goodsFromServer,\n    sortField,\n    reverseField,\n  );\n\n  const resetReverse = () => {\n    if (reverseField || sortField) {\n      return true;\n    }\n\n    return false;\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-info',\n            { 'is-light': sortField !== SORT_FIELD_ALPH },\n          )}\n          onClick={() => setSortField(SORT_FIELD_ALPH)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-info',\n            { 'is-light': sortField !== SORT_FIELD_LENGTH },\n          )}\n          onClick={() => setSortField(SORT_FIELD_LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-info',\n            { 'is-light': !reverseField },\n          )}\n          onClick={() => setReverseField(!reverseField)}\n        >\n          Reverse\n        </button>\n\n        {resetReverse() && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setSortField('');\n              setReverseField(false);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {sortedGoods.map(good => (\n          <li key={good} data-cy=\"Good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { useState } from 'react';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\nexport const [sortField, setSortField] = useState('');\n"],"sourceRoot":""}